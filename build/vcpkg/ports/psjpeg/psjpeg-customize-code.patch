diff --git a/jdapistd.c b/jdapistd.c
index 1f44927..50d24b8 100644
--- a/jdapistd.c
+++ b/jdapistd.c
@@ -192,8 +192,8 @@ _jpeg_crop_scanline(j_decompress_ptr cinfo, JDIMENSION *xoffset,
   if (cinfo->master->lossless)
     ERREXIT(cinfo, JERR_NOTIMPL);
 
-  if ((cinfo->global_state != DSTATE_SCANNING &&
-       cinfo->global_state != DSTATE_BUFIMAGE) || cinfo->output_scanline != 0)
+  if ((cinfo->global_state < DSTATE_SCANNING ||
+       cinfo->global_state > DSTATE_BUFIMAGE) || cinfo->output_scanline != 0)
     ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 
   if (!xoffset || !width)
diff --git a/jddctmgr.c b/jddctmgr.c
index 0bd8c2b..42539d3 100644
--- a/jddctmgr.c
+++ b/jddctmgr.c
@@ -121,10 +121,14 @@ start_pass(j_decompress_ptr cinfo)
         method_ptr = _jpeg_idct_2x2;
       method = JDCT_ISLOW;      /* jidctred uses islow-style table */
       break;
+#endif
+#ifdef IDCT_SCALING_SUPPORTED_ODD
     case 3:
       method_ptr = _jpeg_idct_3x3;
       method = JDCT_ISLOW;      /* jidctint uses islow-style table */
       break;
+#endif
+#ifdef IDCT_SCALING_SUPPORTED
     case 4:
 #ifdef WITH_SIMD
       if (jsimd_can_idct_4x4())
@@ -134,6 +138,8 @@ start_pass(j_decompress_ptr cinfo)
         method_ptr = _jpeg_idct_4x4;
       method = JDCT_ISLOW;      /* jidctred uses islow-style table */
       break;
+#endif
+#ifdef IDCT_SCALING_SUPPORTED_ODD
     case 5:
       method_ptr = _jpeg_idct_5x5;
       method = JDCT_ISLOW;      /* jidctint uses islow-style table */
@@ -192,7 +198,7 @@ start_pass(j_decompress_ptr cinfo)
         break;
       }
       break;
-#ifdef IDCT_SCALING_SUPPORTED
+#ifdef IDCT_SCALING_SUPPORTED_ODD
     case 9:
       method_ptr = _jpeg_idct_9x9;
       method = JDCT_ISLOW;      /* jidctint uses islow-style table */
diff --git a/jdmaster.c b/jdmaster.c
index 80a4842..a71bdb6 100644
--- a/jdmaster.c
+++ b/jdmaster.c
@@ -120,6 +120,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
         jdiv_round_up((long)cinfo->image_height * 2L, (long)DCTSIZE);
       cinfo->_min_DCT_h_scaled_size = 2;
       cinfo->_min_DCT_v_scaled_size = 2;
+#ifdef IDCT_SCALING_SUPPORTED_ODD
     } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 3) {
       /* Provide 3/block_size scaling */
       cinfo->output_width = (JDIMENSION)
@@ -128,6 +129,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
         jdiv_round_up((long)cinfo->image_height * 3L, (long)DCTSIZE);
       cinfo->_min_DCT_h_scaled_size = 3;
       cinfo->_min_DCT_v_scaled_size = 3;
+#endif
     } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 4) {
       /* Provide 4/block_size scaling */
       cinfo->output_width = (JDIMENSION)
@@ -136,6 +138,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
         jdiv_round_up((long)cinfo->image_height * 4L, (long)DCTSIZE);
       cinfo->_min_DCT_h_scaled_size = 4;
       cinfo->_min_DCT_v_scaled_size = 4;
+#ifdef IDCT_SCALING_SUPPORTED_ODD
     } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 5) {
       /* Provide 5/block_size scaling */
       cinfo->output_width = (JDIMENSION)
@@ -161,6 +164,9 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
       cinfo->_min_DCT_h_scaled_size = 7;
       cinfo->_min_DCT_v_scaled_size = 7;
     } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 8) {
+#else
+    } else {
+#endif
       /* Provide 8/block_size scaling */
       cinfo->output_width = (JDIMENSION)
         jdiv_round_up((long)cinfo->image_width * 8L, (long)DCTSIZE);
@@ -168,6 +174,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
         jdiv_round_up((long)cinfo->image_height * 8L, (long)DCTSIZE);
       cinfo->_min_DCT_h_scaled_size = 8;
       cinfo->_min_DCT_v_scaled_size = 8;
+#ifdef IDCT_SCALING_SUPPORTED_ODD
     } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 9) {
       /* Provide 9/block_size scaling */
       cinfo->output_width = (JDIMENSION)
@@ -232,6 +239,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
         jdiv_round_up((long)cinfo->image_height * 16L, (long)DCTSIZE);
       cinfo->_min_DCT_h_scaled_size = 16;
       cinfo->_min_DCT_v_scaled_size = 16;
+#endif
     }
 
     /* Recompute dimensions of components */
diff --git a/jidctint.c b/jidctint.c
index c58592d..6282ca4 100644
--- a/jidctint.c
+++ b/jidctint.c
@@ -412,7 +412,7 @@ _jpeg_idct_islow(j_decompress_ptr cinfo, jpeg_component_info *compptr,
   }
 }
 
-#ifdef IDCT_SCALING_SUPPORTED
+#ifdef IDCT_SCALING_SUPPORTED_ODD
 
 
 /*
diff --git a/jmorecfg.h b/jmorecfg.h
index 89c7842..a69e204 100644
--- a/jmorecfg.h
+++ b/jmorecfg.h
@@ -26,7 +26,7 @@
  * bytes of storage, whether actually used in an image or not.)
  */
 
-#define MAX_COMPONENTS  10      /* maximum number of image components */
+#define MAX_COMPONENTS   4      /* maximum number of image components */
 
 
 /*
@@ -235,14 +235,11 @@ typedef int boolean;
 /* Capability options common to encoder and decoder: */
 
 #define DCT_ISLOW_SUPPORTED     /* accurate integer method */
-#define DCT_IFAST_SUPPORTED     /* less accurate int method [legacy feature] */
-#define DCT_FLOAT_SUPPORTED     /* floating-point method [legacy feature] */
 
 /* Encoder capability options: */
 
 #define C_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
 #define C_PROGRESSIVE_SUPPORTED     /* Progressive JPEG? (Requires MULTISCAN)*/
-#define C_LOSSLESS_SUPPORTED        /* Lossless JPEG? */
 #define ENTROPY_OPT_SUPPORTED       /* Optimization of entropy coding parms? */
 /* Note: if you selected 12-bit data precision, it is dangerous to turn off
  * ENTROPY_OPT_SUPPORTED.  The standard Huffman tables are only good for 8-bit
@@ -253,20 +250,14 @@ typedef int boolean;
  * the default tables don't work for progressive mode or lossless mode.
  * (This may get fixed, however.)
  */
-#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */
 
 /* Decoder capability options: */
 
 #define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
 #define D_PROGRESSIVE_SUPPORTED     /* Progressive JPEG? (Requires MULTISCAN)*/
-#define D_LOSSLESS_SUPPORTED        /* Lossless JPEG? */
 #define SAVE_MARKERS_SUPPORTED      /* jpeg_save_markers() needed? */
-#define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
 #define IDCT_SCALING_SUPPORTED      /* Output rescaling via IDCT? */
 #undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
-#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
-#define QUANT_1PASS_SUPPORTED       /* 1-pass color quantization? */
-#define QUANT_2PASS_SUPPORTED       /* 2-pass color quantization? */
 
 /* more capability options later, no doubt */
 
diff --git a/jconfig.h.in b/jconfig.h.in
index 6cb8296..046dac5 100644
--- a/jconfig.h.in
+++ b/jconfig.h.in
@@ -38,11 +38,8 @@
 
 #undef RIGHT_SHIFT_IS_UNSIGNED
 
-/* Define "boolean" as unsigned char, not int, per Windows custom */
-#ifndef __RPCNDR_H__            /* don't conflict if rpcndr.h already read */
-typedef unsigned char boolean;
-#endif
-#define HAVE_BOOLEAN            /* prevent jmorecfg.h from redefining it */
+#define NO_GETENV
+#define NO_PUTENV
 
 /* Define "INT32" as int, not long, per Windows custom */
 #if !(defined(_BASETSD_H_) || defined(_BASETSD_H))   /* don't conflict if basetsd.h already read */
