diff --git a/jddctmgr.c b/jddctmgr.c
index e78d7be..38532a6 100644
--- a/jddctmgr.c
+++ b/jddctmgr.c
@@ -119,10 +119,14 @@ start_pass(j_decompress_ptr cinfo)
         method_ptr = jpeg_idct_2x2;
       method = JDCT_ISLOW;      /* jidctred uses islow-style table */
       break;
+#endif
+#ifdef IDCT_SCALING_SUPPORTED_ODD
     case 3:
       method_ptr = jpeg_idct_3x3;
       method = JDCT_ISLOW;      /* jidctint uses islow-style table */
       break;
+#endif
+#ifdef IDCT_SCALING_SUPPORTED
     case 4:
       if (jsimd_can_idct_4x4())
         method_ptr = jsimd_idct_4x4;
@@ -130,6 +134,8 @@ start_pass(j_decompress_ptr cinfo)
         method_ptr = jpeg_idct_4x4;
       method = JDCT_ISLOW;      /* jidctred uses islow-style table */
       break;
+#endif
+#ifdef IDCT_SCALING_SUPPORTED_ODD
     case 5:
       method_ptr = jpeg_idct_5x5;
       method = JDCT_ISLOW;      /* jidctint uses islow-style table */
@@ -182,7 +188,7 @@ start_pass(j_decompress_ptr cinfo)
         break;
       }
       break;
-#ifdef IDCT_SCALING_SUPPORTED
+#ifdef IDCT_SCALING_SUPPORTED_ODD
     case 9:
       method_ptr = jpeg_idct_9x9;
       method = JDCT_ISLOW;      /* jidctint uses islow-style table */
diff --git a/jdmaster.c b/jdmaster.c
index a3690bf..dfa600d 100644
--- a/jdmaster.c
+++ b/jdmaster.c
@@ -114,6 +114,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
       jdiv_round_up((long)cinfo->image_height * 2L, (long)DCTSIZE);
     cinfo->_min_DCT_h_scaled_size = 2;
     cinfo->_min_DCT_v_scaled_size = 2;
+#ifdef IDCT_SCALING_SUPPORTED_ODD
   } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 3) {
     /* Provide 3/block_size scaling */
     cinfo->output_width = (JDIMENSION)
@@ -122,6 +123,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
       jdiv_round_up((long)cinfo->image_height * 3L, (long)DCTSIZE);
     cinfo->_min_DCT_h_scaled_size = 3;
     cinfo->_min_DCT_v_scaled_size = 3;
+#endif
   } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 4) {
     /* Provide 4/block_size scaling */
     cinfo->output_width = (JDIMENSION)
@@ -130,6 +132,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
       jdiv_round_up((long)cinfo->image_height * 4L, (long)DCTSIZE);
     cinfo->_min_DCT_h_scaled_size = 4;
     cinfo->_min_DCT_v_scaled_size = 4;
+#ifdef IDCT_SCALING_SUPPORTED_ODD
   } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 5) {
     /* Provide 5/block_size scaling */
     cinfo->output_width = (JDIMENSION)
@@ -155,6 +158,9 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
     cinfo->_min_DCT_h_scaled_size = 7;
     cinfo->_min_DCT_v_scaled_size = 7;
   } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 8) {
+#else
+  } else {
+#endif
     /* Provide 8/block_size scaling */
     cinfo->output_width = (JDIMENSION)
       jdiv_round_up((long)cinfo->image_width * 8L, (long)DCTSIZE);
@@ -162,6 +168,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
       jdiv_round_up((long)cinfo->image_height * 8L, (long)DCTSIZE);
     cinfo->_min_DCT_h_scaled_size = 8;
     cinfo->_min_DCT_v_scaled_size = 8;
+#ifdef IDCT_SCALING_SUPPORTED_ODD
   } else if (cinfo->scale_num * DCTSIZE <= cinfo->scale_denom * 9) {
     /* Provide 9/block_size scaling */
     cinfo->output_width = (JDIMENSION)
@@ -226,6 +233,7 @@ jpeg_core_output_dimensions(j_decompress_ptr cinfo)
       jdiv_round_up((long)cinfo->image_height * 16L, (long)DCTSIZE);
     cinfo->_min_DCT_h_scaled_size = 16;
     cinfo->_min_DCT_v_scaled_size = 16;
+#endif
   }
 
   /* Recompute dimensions of components */
diff --git a/jdmerge.c b/jdmerge.c
index 3a456d6..34a4c5b 100644
--- a/jdmerge.c
+++ b/jdmerge.c
@@ -585,4 +585,12 @@ jinit_merged_upsampler(j_decompress_ptr cinfo)
   build_ycc_rgb_table(cinfo);
 }
 
+#else
+
+GLOBAL(void)
+jinit_merged_upsampler(j_decompress_ptr cinfo)
+{
+  ERREXIT(cinfo, JERR_NOT_COMPILED);
+}
+
 #endif /* UPSAMPLE_MERGING_SUPPORTED */
diff --git a/jidctint.c b/jidctint.c
index bb08748..10ff856 100644
--- a/jidctint.c
+++ b/jidctint.c
@@ -412,7 +412,7 @@ jpeg_idct_islow(j_decompress_ptr cinfo, jpeg_component_info *compptr,
   }
 }
 
-#ifdef IDCT_SCALING_SUPPORTED
+#ifdef IDCT_SCALING_SUPPORTED_ODD
 
 
 /*
diff --git a/jmorecfg.h b/jmorecfg.h
index b33a991..2b94a36 100644
--- a/jmorecfg.h
+++ b/jmorecfg.h
@@ -24,7 +24,7 @@
  * bytes of storage, whether actually used in an image or not.)
  */
 
-#define MAX_COMPONENTS  10      /* maximum number of image components */
+#define MAX_COMPONENTS  4      /* maximum number of image components */
 
 
 /*
@@ -251,19 +251,19 @@ typedef int boolean;
  * The exact same statements apply for progressive JPEG: the default tables
  * don't work for progressive mode.  (This may get fixed, however.)
  */
-#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */
+//#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */
 
 /* Decoder capability options: */
 
 #define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
 #define D_PROGRESSIVE_SUPPORTED     /* Progressive JPEG? (Requires MULTISCAN)*/
 #define SAVE_MARKERS_SUPPORTED      /* jpeg_save_markers() needed? */
-#define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
+//#define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
 #define IDCT_SCALING_SUPPORTED      /* Output rescaling via IDCT? */
 #undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
-#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
-#define QUANT_1PASS_SUPPORTED       /* 1-pass color quantization? */
-#define QUANT_2PASS_SUPPORTED       /* 2-pass color quantization? */
+//#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
+//#define QUANT_1PASS_SUPPORTED       /* 1-pass color quantization? */
+//#define QUANT_2PASS_SUPPORTED       /* 2-pass color quantization? */
 
 /* more capability options later, no doubt */
 
diff --git a/jquant1.c b/jquant1.c
index 73b83e1..d280caa 100644
--- a/jquant1.c
+++ b/jquant1.c
@@ -853,4 +853,12 @@ jinit_1pass_quantizer(j_decompress_ptr cinfo)
     alloc_fs_workspace(cinfo);
 }
 
+#else
+
+GLOBAL(void)
+jinit_1pass_quantizer(j_decompress_ptr cinfo)
+{
+  ERREXIT(cinfo, JERR_NOT_COMPILED);
+}
+
 #endif /* QUANT_1PASS_SUPPORTED */
diff --git a/jquant2.c b/jquant2.c
index 44efb18..33a2b62 100644
--- a/jquant2.c
+++ b/jquant2.c
@@ -1282,4 +1282,12 @@ jinit_2pass_quantizer(j_decompress_ptr cinfo)
   }
 }
 
+#else
+
+GLOBAL(void)
+jinit_2pass_quantizer(j_decompress_ptr cinfo)
+{
+  ERREXIT(cinfo, JERR_NOT_COMPILED);
+}
+
 #endif /* QUANT_2PASS_SUPPORTED */
diff --git a/win/jconfig.h.in b/win/jconfig.h.in
index 0fca77b..0d623fb 100644
--- a/win/jconfig.h.in
+++ b/win/jconfig.h.in
@@ -6,17 +6,13 @@
 #cmakedefine D_ARITH_CODING_SUPPORTED
 #cmakedefine MEM_SRCDST_SUPPORTED
 #cmakedefine WITH_SIMD
+#define NO_GETENV
+#define NO_PUTENV
 
 #define BITS_IN_JSAMPLE  @BITS_IN_JSAMPLE@      /* use 8 or 12 */
 
 #undef RIGHT_SHIFT_IS_UNSIGNED
 
-/* Define "boolean" as unsigned char, not int, per Windows custom */
-#ifndef __RPCNDR_H__            /* don't conflict if rpcndr.h already read */
-typedef unsigned char boolean;
-#endif
-#define HAVE_BOOLEAN            /* prevent jmorecfg.h from redefining it */
-
 /* Define "INT32" as int, not long, per Windows custom */
 #if !(defined(_BASETSD_H_) || defined(_BASETSD_H))   /* don't conflict if basetsd.h already read */
 typedef short INT16;
