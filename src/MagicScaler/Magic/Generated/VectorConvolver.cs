//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes to this file will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Numerics;
using System.Runtime.CompilerServices;

using VectorF = System.Numerics.Vector<float>;

namespace PhotoSauce.MagicScaler
{
	unsafe internal class Convolver4ChanFloat : IConvolver
	{
		private const int Channels = 4;

		void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			float* pmapx = (float*)mapxstart;
			float* tp = (float*)tstart;
			float* tpe = (float*)(tstart + cb);
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int ix = *(int*)pmapx++;
				float* ip = (float*)istart + ix * Channels;
				float* ipe = ip + smapx * Channels - 4 * VectorF.Count;
				float* mp = pmapx;
				pmapx += smapx * Channels;

				VectorF av0 = VectorF.Zero;

				while (ip <= ipe)
				{
					var iv0 = Unsafe.Read<VectorF>(ip);
					var iv1 = Unsafe.Read<VectorF>(ip + VectorF.Count);
					var iv2 = Unsafe.Read<VectorF>(ip + 2 * VectorF.Count);
					var iv3 = Unsafe.Read<VectorF>(ip + 3 * VectorF.Count);

					var mv0 = Unsafe.Read<VectorF>(mp);
					var mv1 = Unsafe.Read<VectorF>(mp + VectorF.Count);
					var mv2 = Unsafe.Read<VectorF>(mp + 2 * VectorF.Count);
					var mv3 = Unsafe.Read<VectorF>(mp + 3 * VectorF.Count);

					av0 += iv0 * mv0;
					av0 += iv1 * mv1;
					av0 += iv2 * mv2;
					av0 += iv3 * mv3;

					ip += 4 * VectorF.Count;
					mp += 4 * VectorF.Count;
				}

				float a0 = av0[0];
				float a1 = av0[1];
				float a2 = av0[2];
				float a3 = av0[3];

				if (VectorF.Count == 8)
				{
					a0 += av0[4];
					a1 += av0[5];
					a2 += av0[6];
					a3 += av0[7];
				}

				ipe += 4 * VectorF.Count;
				while (ip < ipe)
				{
					a0 += ip[0] * mp[0];
					a1 += ip[1] * mp[1];
					a2 += ip[2] * mp[2];
					a3 += ip[3] * mp[3];

					ip += Channels;
					mp += Channels;
				}

				tp[0] = a0;
				tp[1] = a1;
				tp[2] = a2;
				tp[3] = a3;
				tp += tstride;
			}
		}

		void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			float* op = (float*)ostart;
			int xc = ox + ow, tstride = smapy * Channels;
			float fmin = VectorF.Zero[0], fmax = VectorF.One[0];

			while (ox < xc)
			{
				float* tp = (float*)tstart + ox * tstride;
				float* tpe = tp + tstride - 4 * VectorF.Count;
				float* mp = (float*)pmapy;

				VectorF av0 = VectorF.Zero;

				while (tp <= tpe)
				{
					var tv0 = Unsafe.Read<VectorF>(tp);
					var tv1 = Unsafe.Read<VectorF>(tp + VectorF.Count);
					var tv2 = Unsafe.Read<VectorF>(tp + 2 * VectorF.Count);
					var tv3 = Unsafe.Read<VectorF>(tp + 3 * VectorF.Count);

					var mv0 = Unsafe.Read<VectorF>(mp);
					var mv1 = Unsafe.Read<VectorF>(mp + VectorF.Count);
					var mv2 = Unsafe.Read<VectorF>(mp + 2 * VectorF.Count);
					var mv3 = Unsafe.Read<VectorF>(mp + 3 * VectorF.Count);

					av0 += tv0 * mv0;
					av0 += tv1 * mv1;
					av0 += tv2 * mv2;
					av0 += tv3 * mv3;

					tp += 4 * VectorF.Count;
					mp += 4 * VectorF.Count;
				}

				float a0 = av0[0];
				float a1 = av0[1];
				float a2 = av0[2];
				float a3 = av0[3];

				if (VectorF.Count == 8)
				{
					a0 += av0[4];
					a1 += av0[5];
					a2 += av0[6];
					a3 += av0[7];
				}

				tpe += 4 * VectorF.Count;
				while (tp < tpe)
				{
					a0 += tp[0] * mp[0];
					a1 += tp[1] * mp[1];
					a2 += tp[2] * mp[2];
					a3 += tp[3] * mp[3];

					tp += Channels;
					mp += Channels;
				}

				op[0] = a0.Clamp(fmin, fmax);
				op[1] = a1.Clamp(fmin, fmax);
				op[2] = a2.Clamp(fmin, fmax);
				op[3] = a3.Clamp(fmin, fmax);
				op += Channels;
				ox++;
			}
		}

		void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			float famt = amt * 0.01f;
			float threshold = (float)thresh / byte.MaxValue;

			float* ip = (float*)cstart, yp = (float*)ystart, bp = (float*)bstart, op = (float*)ostart;
			float* ipe = ip + ow * Channels;

			var vmin = Vector4.Zero;
			var vmax = Vector4.One;
			var vamt = new Vector4(famt, famt, famt, 0f);

			while (ip < ipe)
			{
				float dif = *yp++ - *bp++;
				var c0 = Unsafe.Read<Vector4>(ip);

				if (threshold == 0 || Math.Abs(dif) > threshold)
				{
					var vd = new Vector4(dif) * vamt;

					if (gamma)
						c0 = Vector4.SquareRoot(c0);

					c0 = Vector4.Clamp(c0 + vd, vmin, vmax);

					if (gamma)
						c0 *= c0;
				}

				Unsafe.Write(op, c0);

				ip += Channels;
				op += Channels;
			}
		}
	}

	unsafe internal class Convolver3ChanFloat : IConvolver
	{
		private const int Channels = 3;

		void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			float* pmapx = (float*)mapxstart;
			float* tp = (float*)tstart;
			float* tpe = (float*)(tstart + cb);
			int tstride = smapy * 4;

			while (tp < tpe)
			{
				int ix = *(int*)pmapx++;
				float* ip = (float*)istart + ix * Channels;
				float* ipe = ip + smapx * Channels - 3 * 4;
				float* mp = pmapx;
				pmapx += smapx * Channels;

				Vector4 av0 = Vector4.Zero, av1 = av0, av2 = av0;

				while (ip <= ipe)
				{
					var iv0 = Unsafe.Read<Vector4>(ip);
					var iv1 = Unsafe.Read<Vector4>(ip + 4);
					var iv2 = Unsafe.Read<Vector4>(ip + 2 * 4);

					var mv0 = Unsafe.Read<Vector4>(mp);
					var mv1 = Unsafe.Read<Vector4>(mp + 4);
					var mv2 = Unsafe.Read<Vector4>(mp + 2 * 4);

					av0 += iv0 * mv0;
					av1 += iv1 * mv1;
					av2 += iv2 * mv2;

					ip += 3 * 4;
					mp += 3 * 4;
				}

				float a0 = av0.X + av0.W + av1.Z + av2.Y;
				float a1 = av0.Y + av1.X + av1.W + av2.Z;
				float a2 = av0.Z + av1.Y + av2.X + av2.W;

				ipe += 3 * 4;
				while (ip < ipe)
				{
					a0 += ip[0] * mp[0];
					a1 += ip[1] * mp[1];
					a2 += ip[2] * mp[2];

					ip += Channels;
					mp += Channels;
				}

				tp[0] = a0;
				tp[1] = a1;
				tp[2] = a2;
				tp += tstride;
			}
		}

		void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			float* op = (float*)ostart;
			int xc = ox + ow, tstride = smapy * Channels;
			float fmin = Vector4.Zero.X, fmax = Vector4.One.X;

			while (ox < xc)
			{
				float* tp = (float*)tstart + ox * tstride;
				float* tpe = tp + tstride - 3 * 4;
				float* mp = (float*)pmapy;

				Vector4 av0 = Vector4.Zero, av1 = av0, av2 = av0;

				while (tp <= tpe)
				{
					var tv0 = Unsafe.Read<Vector4>(tp);
					var tv1 = Unsafe.Read<Vector4>(tp + 4);
					var tv2 = Unsafe.Read<Vector4>(tp + 2 * 4);

					var mv0 = Unsafe.Read<Vector4>(mp);
					var mv1 = Unsafe.Read<Vector4>(mp + 4);
					var mv2 = Unsafe.Read<Vector4>(mp + 2 * 4);

					av0 += tv0 * mv0;
					av1 += tv1 * mv1;
					av2 += tv2 * mv2;

					tp += 3 * 4;
					mp += 3 * 4;
				}

				float a0 = av0.X + av0.W + av1.Z + av2.Y;
				float a1 = av0.Y + av1.X + av1.W + av2.Z;
				float a2 = av0.Z + av1.Y + av2.X + av2.W;

				tpe += 3 * 4;
				while (tp < tpe)
				{
					a0 += tp[0] * mp[0];
					a1 += tp[1] * mp[1];
					a2 += tp[2] * mp[2];

					tp += Channels;
					mp += Channels;
				}

				op[0] = a0.Clamp(fmin, fmax);
				op[1] = a1.Clamp(fmin, fmax);
				op[2] = a2.Clamp(fmin, fmax);
				op += Channels;
				ox++;
			}
		}

		void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			float famt = amt * 0.01f;
			float threshold = (float)thresh / byte.MaxValue;

			float* ip = (float*)cstart, yp = (float*)ystart, bp = (float*)bstart, op = (float*)ostart;
			float* ipe = ip + ow * Channels;

			var vmin = Vector3.Zero;
			var vmax = Vector3.One;

			while (ip < ipe)
			{
				float dif = *yp++ - *bp++;
				var c0 = Unsafe.Read<Vector3>(ip);

				if (threshold == 0 || Math.Abs(dif) > threshold)
				{
					var vd = new Vector3(dif * famt);

					if (gamma)
						c0 = Vector3.SquareRoot(c0);

					c0 = Vector3.Clamp(c0 + vd, vmin, vmax);

					if (gamma)
						c0 *= c0;
				}

				Unsafe.Write(op, c0);

				ip += Channels;
				op += Channels;
			}
		}
	}

	unsafe internal class Convolver3XChanFloat : IConvolver
	{
		private const int Channels = 4;

		void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			float* pmapx = (float*)mapxstart;
			float* tp = (float*)tstart;
			float* tpe = (float*)(tstart + cb);
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int ix = *(int*)pmapx++;
				float* ip = (float*)istart + ix * Channels;
				float* ipe = ip + smapx * Channels - 4 * VectorF.Count;
				float* mp = pmapx;
				pmapx += smapx * Channels;

				VectorF av0 = VectorF.Zero;

				while (ip <= ipe)
				{
					var iv0 = Unsafe.Read<VectorF>(ip);
					var iv1 = Unsafe.Read<VectorF>(ip + VectorF.Count);
					var iv2 = Unsafe.Read<VectorF>(ip + 2 * VectorF.Count);
					var iv3 = Unsafe.Read<VectorF>(ip + 3 * VectorF.Count);

					var mv0 = Unsafe.Read<VectorF>(mp);
					var mv1 = Unsafe.Read<VectorF>(mp + VectorF.Count);
					var mv2 = Unsafe.Read<VectorF>(mp + 2 * VectorF.Count);
					var mv3 = Unsafe.Read<VectorF>(mp + 3 * VectorF.Count);

					av0 += iv0 * mv0;
					av0 += iv1 * mv1;
					av0 += iv2 * mv2;
					av0 += iv3 * mv3;

					ip += 4 * VectorF.Count;
					mp += 4 * VectorF.Count;
				}

				float a0 = av0[0];
				float a1 = av0[1];
				float a2 = av0[2];

				if (VectorF.Count == 8)
				{
					a0 += av0[4];
					a1 += av0[5];
					a2 += av0[6];
				}

				ipe += 4 * VectorF.Count;
				while (ip < ipe)
				{
					a0 += ip[0] * mp[0];
					a1 += ip[1] * mp[1];
					a2 += ip[2] * mp[2];

					ip += Channels;
					mp += Channels;
				}

				tp[0] = a0;
				tp[1] = a1;
				tp[2] = a2;
				tp += tstride;
			}
		}

		void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			float* op = (float*)ostart;
			int xc = ox + ow, tstride = smapy * Channels;
			float fmin = VectorF.Zero[0], fmax = VectorF.One[0];

			while (ox < xc)
			{
				float* tp = (float*)tstart + ox * tstride;
				float* tpe = tp + tstride - 4 * VectorF.Count;
				float* mp = (float*)pmapy;

				VectorF av0 = VectorF.Zero;

				while (tp <= tpe)
				{
					var tv0 = Unsafe.Read<VectorF>(tp);
					var tv1 = Unsafe.Read<VectorF>(tp + VectorF.Count);
					var tv2 = Unsafe.Read<VectorF>(tp + 2 * VectorF.Count);
					var tv3 = Unsafe.Read<VectorF>(tp + 3 * VectorF.Count);

					var mv0 = Unsafe.Read<VectorF>(mp);
					var mv1 = Unsafe.Read<VectorF>(mp + VectorF.Count);
					var mv2 = Unsafe.Read<VectorF>(mp + 2 * VectorF.Count);
					var mv3 = Unsafe.Read<VectorF>(mp + 3 * VectorF.Count);

					av0 += tv0 * mv0;
					av0 += tv1 * mv1;
					av0 += tv2 * mv2;
					av0 += tv3 * mv3;

					tp += 4 * VectorF.Count;
					mp += 4 * VectorF.Count;
				}

				float a0 = av0[0];
				float a1 = av0[1];
				float a2 = av0[2];

				if (VectorF.Count == 8)
				{
					a0 += av0[4];
					a1 += av0[5];
					a2 += av0[6];
				}

				tpe += 4 * VectorF.Count;
				while (tp < tpe)
				{
					a0 += tp[0] * mp[0];
					a1 += tp[1] * mp[1];
					a2 += tp[2] * mp[2];

					tp += Channels;
					mp += Channels;
				}

				op[0] = a0.Clamp(fmin, fmax);
				op[1] = a1.Clamp(fmin, fmax);
				op[2] = a2.Clamp(fmin, fmax);
				op += Channels;
				ox++;
			}
		}

		void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			float famt = amt * 0.01f;
			float threshold = (float)thresh / byte.MaxValue;

			float* ip = (float*)cstart, yp = (float*)ystart, bp = (float*)bstart, op = (float*)ostart;
			float* ipe = ip + ow * Channels;

			var vmin = Vector4.Zero;
			var vmax = Vector4.One;

			while (ip < ipe)
			{
				float dif = *yp++ - *bp++;
				var c0 = Unsafe.Read<Vector4>(ip);

				if (threshold == 0 || Math.Abs(dif) > threshold)
				{
					var vd = new Vector4(dif * famt);

					if (gamma)
						c0 = Vector4.SquareRoot(c0);

					c0 = Vector4.Clamp(c0 + vd, vmin, vmax);

					if (gamma)
						c0 *= c0;
				}

				Unsafe.Write(op, c0);

				ip += Channels;
				op += Channels;
			}
		}
	}

	unsafe internal class Convolver2ChanFloat : IConvolver
	{
		private const int Channels = 2;

		void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			float* pmapx = (float*)mapxstart;
			float* tp = (float*)tstart;
			float* tpe = (float*)(tstart + cb);
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int ix = *(int*)pmapx++;
				float* ip = (float*)istart + ix * Channels;
				float* ipe = ip + smapx * Channels - 2 * 4;
				float* mp = pmapx;
				pmapx += smapx * Channels;

				Vector4 av0 = Vector4.Zero;

				while (ip <= ipe)
				{
					var iv0 = Unsafe.Read<Vector4>(ip);
					var iv1 = Unsafe.Read<Vector4>(ip + 4);

					var mv0 = Unsafe.Read<Vector4>(mp);
					var mv1 = Unsafe.Read<Vector4>(mp + 4);

					av0 += iv0 * mv0;
					av0 += iv1 * mv1;

					ip += 2 * 4;
					mp += 2 * 4;
				}

				float a0 = av0.X + av0.Z;
				float a1 = av0.Y + av0.W;

				ipe += 2 * 4;
				while (ip < ipe)
				{
					a0 += ip[0] * mp[0];
					a1 += ip[1] * mp[1];

					ip += Channels;
					mp += Channels;
				}

				tp[0] = a0;
				tp[1] = a1;
				tp += tstride;
			}
		}

		void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			float* op = (float*)ostart;
			int xc = ox + ow, tstride = smapy * Channels;
			float fmin = Vector4.Zero.X, fmax = Vector4.One.X;

			while (ox < xc)
			{
				float* tp = (float*)tstart + ox * tstride;
				float* tpe = tp + tstride - 2 * 4;
				float* mp = (float*)pmapy;

				Vector4 av0 = Vector4.Zero;

				while (tp <= tpe)
				{
					var tv0 = Unsafe.Read<Vector4>(tp);
					var tv1 = Unsafe.Read<Vector4>(tp + 4);

					var mv0 = Unsafe.Read<Vector4>(mp);
					var mv1 = Unsafe.Read<Vector4>(mp + 4);

					av0 += tv0 * mv0;
					av0 += tv1 * mv1;

					tp += 2 * 4;
					mp += 2 * 4;
				}

				float a0 = av0.X + av0.Z;
				float a1 = av0.Y + av0.W;

				tpe += 2 * 4;
				while (tp < tpe)
				{
					a0 += tp[0] * mp[0];
					a1 += tp[1] * mp[1];

					tp += Channels;
					mp += Channels;
				}

				op[0] = a0.Clamp(fmin, fmax);
				op[1] = a1.Clamp(fmin, fmax);
				op += Channels;
				ox++;
			}
		}

		void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma) => throw new NotImplementedException();
	}

	unsafe internal class Convolver1ChanFloat : IConvolver
	{
		private const int Channels = 1;

		void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			float* pmapx = (float*)mapxstart;
			float* tp = (float*)tstart;
			float* tpe = (float*)(tstart + cb);
			int tstride = smapy * Channels;

			var m0 = VectorF.One;

			while (tp < tpe)
			{
				int ix = *(int*)pmapx++;
				float* ip = (float*)istart + ix * Channels;
				float* ipe = ip + smapx * Channels - VectorF.Count;
				float* mp = pmapx;
				pmapx += smapx * Channels;

				VectorF av0 = VectorF.Zero;

				while (ip <= ipe)
				{
					var iv0 = Unsafe.Read<VectorF>(ip);

					var mv0 = Unsafe.Read<VectorF>(mp);

					av0 += iv0 * mv0;

					ip += VectorF.Count;
					mp += VectorF.Count;
				}

				float a0 = Vector.Dot(av0, m0);

				ipe += VectorF.Count;
				while (ip < ipe)
				{
					a0 += ip[0] * mp[0];

					ip += Channels;
					mp += Channels;
				}

				tp[0] = a0;
				tp += tstride;
			}
		}

		void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			float* op = (float*)ostart;
			int xc = ox + ow, tstride = smapy * Channels;

			var m0 = VectorF.One;
			float fmin = VectorF.Zero[0], fmax = VectorF.One[0];

			while (ox < xc)
			{
				float* tp = (float*)tstart + ox * tstride;
				float* tpe = tp + tstride - VectorF.Count;
				float* mp = (float*)pmapy;

				VectorF av0 = VectorF.Zero;

				while (tp <= tpe)
				{
					var tv0 = Unsafe.Read<VectorF>(tp);

					var mv0 = Unsafe.Read<VectorF>(mp);

					av0 += tv0 * mv0;

					tp += VectorF.Count;
					mp += VectorF.Count;
				}

				float a0 = Vector.Dot(av0, m0);

				tpe += VectorF.Count;
				while (tp < tpe)
				{
					a0 += tp[0] * mp[0];

					tp += Channels;
					mp += Channels;
				}

				op[0] = a0.Clamp(fmin, fmax);
				op += Channels;
				ox++;
			}
		}

		void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			float famt = amt * 0.01f;
			float threshold = (float)thresh / byte.MaxValue;

			float* ip = (float*)cstart, yp = (float*)ystart, bp = (float*)bstart, op = (float*)ostart;
			float* ipe = ip + ow * Channels - VectorF.Count;

			var vthresh = new VectorF(threshold > 0f ? threshold : -1f);
			var vamt = new VectorF(famt);
			var vmin = VectorF.Zero;
			var vmax = VectorF.One;
			float fmin = vmin[0], fmax = vmax[0];

			while (ip <= ipe)
			{
				var vd = Unsafe.Read<VectorF>(yp) - Unsafe.Read<VectorF>(bp);
				if (thresh > 0)
				{
					var sm = Vector.GreaterThan(Vector.Abs(vd), vthresh);
					vd = Vector.ConditionalSelect(sm, vd, vmin);
				}
				vd *= vamt;

				var v0 = Unsafe.Read<VectorF>(ip);

				if (gamma)
					v0 = Vector.SquareRoot(v0);

				v0 = (v0 + vd).Clamp(vmin, vmax);

				if (gamma)
					v0 *= v0;

				Unsafe.Write(op, v0);

				ip += VectorF.Count * Channels;
				op += VectorF.Count * Channels;
				yp += VectorF.Count;
				bp += VectorF.Count;
			}

			ipe += VectorF.Count;
			while (ip < ipe)
			{
				float dif = *yp++ - *bp++;
				float c0 = *ip;

				if (threshold == 0 || Math.Abs(dif) > threshold)
				{
					dif *= famt;

					if (gamma)
						c0 = (float)Math.Sqrt(c0);

					c0 = (c0 + dif).Clamp(fmin, fmax);

					if (gamma)
						c0 *= c0;
				}

				*op = c0;

				ip += Channels;
				op += Channels;
			}
		}
	}
}
