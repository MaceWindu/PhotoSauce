//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes to this file will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

using System;

using static PhotoSauce.MagicScaler.MathUtil;

namespace PhotoSauce.MagicScaler
{
	internal sealed class ConvolverBgraByte : IConvolver
	{
		private const int Channels = 4;

		public static ConvolverBgraByte Instance = new ConvolverBgraByte();

		private ConvolverBgraByte() { }

		int IConvolver.Channels => Channels;
		int IConvolver.MapChannels => 1;

		unsafe void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			int* tp = (int*)tstart, tpe = (int*)(tstart + cb);
			int* pmapx = (int*)mapxstart;
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int a0 = 0, a1 = 0, a2 = 0, aa = 0, aw = 0;

				int ix = *pmapx++;
				byte* ip = istart + ix * Channels;
				byte* ipe = ip + smapx * Channels - 4 * Channels;
				int* mp = pmapx;
				pmapx += smapx;

				while (ip <= ipe)
				{
					int alpha = ip[3];
					int w = mp[0];

					aa += alpha * w;
					if (alpha < byte.MaxValue)
					{
						int pw = UnFix8(w * alpha);
						aw += w - pw;
						w = pw;
					}

					if (w != 0)
					{
						a0 += ip[0] * w;
						a1 += ip[1] * w;
						a2 += ip[2] * w;
					}

					alpha = ip[7];
					w = mp[1];

					aa += alpha * w;
					if (alpha < byte.MaxValue)
					{
						int pw = UnFix8(w * alpha);
						aw += w - pw;
						w = pw;
					}

					if (w != 0)
					{
						a0 += ip[4] * w;
						a1 += ip[5] * w;
						a2 += ip[6] * w;
					}

					alpha = ip[11];
					w = mp[2];

					aa += alpha * w;
					if (alpha < byte.MaxValue)
					{
						int pw = UnFix8(w * alpha);
						aw += w - pw;
						w = pw;
					}

					if (w != 0)
					{
						a0 += ip[8] * w;
						a1 += ip[9] * w;
						a2 += ip[10] * w;
					}

					alpha = ip[15];
					w = mp[3];

					aa += alpha * w;
					if (alpha < byte.MaxValue)
					{
						int pw = UnFix8(w * alpha);
						aw += w - pw;
						w = pw;
					}

					if (w != 0)
					{
						a0 += ip[12] * w;
						a1 += ip[13] * w;
						a2 += ip[14] * w;
					}

					ip += 4 * Channels;
					mp += 4;
				}

				ipe += 4 * Channels;
				while (ip < ipe)
				{
					int alpha = ip[3];
					int w = mp[0];

					aa += alpha * w;
					if (alpha < byte.MaxValue)
					{
						int pw = UnFix8(w * alpha);
						aw += w - pw;
						w = pw;
					}

					if (w != 0)
					{
						a0 += ip[0] * w;
						a1 += ip[1] * w;
						a2 += ip[2] * w;
					}

					ip += Channels;
					mp++;
				}

				if (aw != 0)
				{
					int wf = aw == UQ15One ? UQ15One : ((UQ15One * UQ15One) / (UQ15One - aw));
					a0 = UnFix15(a0) * wf;
					a1 = UnFix15(a1) * wf;
					a2 = UnFix15(a2) * wf;
				}

				tp[0] = UnFix8(a0);
				tp[1] = UnFix8(a1);
				tp[2] = UnFix8(a2);
				tp[3] = UnFix15(aa);
				tp += tstride;
			}
		}

		unsafe void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			byte* op = ostart;
			int xc = ox + ow, tstride = smapy * Channels;

			while (ox < xc)
			{
				int a0 = 0, a1 = 0, a2 = 0, aa = 0, aw = 0;

				int* tp = (int*)tstart + ox * tstride;
				int* tpe = tp + tstride - 2 * Channels;
				int* mp = (int*)pmapy;

				while (tp <= tpe)
				{
					int alpha = tp[3];
					int w = mp[0];

					aa += alpha * w;
					if (alpha < byte.MaxValue)
					{
						int pw = UnFix8(w * alpha);
						aw += w - pw;
						w = pw;
					}

					if (w != 0)
					{
						a0 += tp[0] * w;
						a1 += tp[1] * w;
						a2 += tp[2] * w;
					}

					alpha = tp[7];
					w = mp[1];

					aa += alpha * w;
					if (alpha < byte.MaxValue)
					{
						int pw = UnFix8(w * alpha);
						aw += w - pw;
						w = pw;
					}

					if (w != 0)
					{
						a0 += tp[4] * w;
						a1 += tp[5] * w;
						a2 += tp[6] * w;
					}

					tp += 2 * Channels;
					mp += 2;
				}

				tpe += 2 * Channels;
				while (tp < tpe)
				{
					int alpha = tp[3];
					int w = mp[0];

					aa += alpha * w;
					if (alpha < byte.MaxValue)
					{
						int pw = UnFix8(w * alpha);
						aw += w - pw;
						w = pw;
					}

					if (w != 0)
					{
						a0 += tp[0] * w;
						a1 += tp[1] * w;
						a2 += tp[2] * w;
					}

					tp += Channels;
					mp++;
				}

				if (aa <= UQ15Round)
				{
					a0 = a1 = a2 = aa = 0;
				}
				else if (aw != 0)
				{
					int wf = aw == UQ15One ? UQ15One : ((UQ15One * UQ15One) / (UQ15One - aw));
					a0 = UnFix15(a0) * wf;
					a1 = UnFix15(a1) * wf;
					a2 = UnFix15(a2) * wf;
				}

				op[0] = UnFix22ToByte(a0);
				op[1] = UnFix22ToByte(a1);
				op[2] = UnFix22ToByte(a2);
				op[3] = UnFix15ToByte(aa);
				op += Channels;
				ox++;
			}
		}

		unsafe void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			int iamt = Fix15(amt * 0.01);
			int threshold = thresh;

			byte* ip = cstart + ox * Channels, yp = ystart + ox, bp = bstart, op = ostart;

			int xc = ox + ow;
			for (int x = ox; x < xc; x++, ip += Channels, op += Channels)
			{
				int dif = *yp++ - *bp++;

				byte c0 = ip[0], c1 = ip[1], c2 = ip[2], c3 = ip[3];
				if (threshold == 0 || Math.Abs(dif) > threshold)
				{
					dif = UnFix15(dif * iamt);
					op[0] = ClampToByte(c0 + dif);
					op[1] = ClampToByte(c1 + dif);
					op[2] = ClampToByte(c2 + dif);
					op[3] = c3;
				}
				else
				{
					op[0] = c0;
					op[1] = c1;
					op[2] = c2;
					op[3] = c3;
				}
			}
		}
	}

	internal sealed class Convolver4ChanByte : IConvolver
	{
		private const int Channels = 4;

		public static Convolver4ChanByte Instance = new Convolver4ChanByte();

		private Convolver4ChanByte() { }

		int IConvolver.Channels => Channels;
		int IConvolver.MapChannels => 1;

		unsafe void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			int* tp = (int*)tstart, tpe = (int*)(tstart + cb);
			int* pmapx = (int*)mapxstart;
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int a0 = 0, a1 = 0, a2 = 0, a3 = 0;

				int ix = *pmapx++;
				byte* ip = istart + ix * Channels;
				byte* ipe = ip + smapx * Channels - 4 * Channels;
				int* mp = pmapx;
				pmapx += smapx;

				while (ip <= ipe)
				{
					int w = mp[0];
					a0 += ip[0] * w;
					a1 += ip[1] * w;
					a2 += ip[2] * w;
					a3 += ip[3] * w;

					w = mp[1];
					a0 += ip[4] * w;
					a1 += ip[5] * w;
					a2 += ip[6] * w;
					a3 += ip[7] * w;

					w = mp[2];
					a0 += ip[8] * w;
					a1 += ip[9] * w;
					a2 += ip[10] * w;
					a3 += ip[11] * w;

					w = mp[3];
					a0 += ip[12] * w;
					a1 += ip[13] * w;
					a2 += ip[14] * w;
					a3 += ip[15] * w;

					ip += 4 * Channels;
					mp += 4;
				}

				ipe += 4 * Channels;
				while (ip < ipe)
				{
					int w = mp[0];
					a0 += ip[0] * w;
					a1 += ip[1] * w;
					a2 += ip[2] * w;
					a3 += ip[3] * w;

					ip += Channels;
					mp++;
				}

				tp[0] = UnFix8(a0);
				tp[1] = UnFix8(a1);
				tp[2] = UnFix8(a2);
				tp[3] = UnFix8(a3);
				tp += tstride;
			}
		}

		unsafe void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			byte* op = ostart;
			int xc = ox + ow, tstride = smapy * Channels;

			while (ox < xc)
			{
				int a0 = 0, a1 = 0, a2 = 0, a3 = 0;

				int* tp = (int*)tstart + ox * tstride;
				int* tpe = tp + tstride - 2 * Channels;
				int* mp = (int*)pmapy;

				while (tp <= tpe)
				{
					int w = mp[0];
					a0 += tp[0] * w;
					a1 += tp[1] * w;
					a2 += tp[2] * w;
					a3 += tp[3] * w;

					w = mp[1];
					a0 += tp[4] * w;
					a1 += tp[5] * w;
					a2 += tp[6] * w;
					a3 += tp[7] * w;

					tp += 2 * Channels;
					mp += 2;
				}

				tpe += 2 * Channels;
				while (tp < tpe)
				{
					int w = mp[0];
					a0 += tp[0] * w;
					a1 += tp[1] * w;
					a2 += tp[2] * w;
					a3 += tp[3] * w;

					tp += Channels;
					mp++;
				}

				op[0] = UnFix22ToByte(a0);
				op[1] = UnFix22ToByte(a1);
				op[2] = UnFix22ToByte(a2);
				op[3] = UnFix22ToByte(a3);
				op += Channels;
				ox++;
			}
		}

		unsafe void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			int iamt = Fix15(amt * 0.01);
			int threshold = thresh;

			byte* ip = cstart + ox * Channels, yp = ystart + ox, bp = bstart, op = ostart;

			int xc = ox + ow;
			for (int x = ox; x < xc; x++, ip += Channels, op += Channels)
			{
				int dif = *yp++ - *bp++;

				byte c0 = ip[0], c1 = ip[1], c2 = ip[2], c3 = ip[3];
				if (threshold == 0 || Math.Abs(dif) > threshold)
				{
					dif = UnFix15(dif * iamt);
					op[0] = ClampToByte(c0 + dif);
					op[1] = ClampToByte(c1 + dif);
					op[2] = ClampToByte(c2 + dif);
					op[3] = c3;
				}
				else
				{
					op[0] = c0;
					op[1] = c1;
					op[2] = c2;
					op[3] = c3;
				}
			}
		}
	}

	internal sealed class Convolver4ChanUQ15 : IConvolver
	{
		private const int Channels = 4;

		public static Convolver4ChanUQ15 Instance = new Convolver4ChanUQ15();

		private Convolver4ChanUQ15() { }

		int IConvolver.Channels => Channels;
		int IConvolver.MapChannels => 1;

		unsafe void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			int* tp = (int*)tstart, tpe = (int*)(tstart + cb);
			int* pmapx = (int*)mapxstart;
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int a0 = 0, a1 = 0, a2 = 0, a3 = 0;

				int ix = *pmapx++;
				ushort* ip = (ushort*)istart + ix * Channels;
				ushort* ipe = ip + smapx * Channels - 4 * Channels;
				int* mp = pmapx;
				pmapx += smapx;

				while (ip <= ipe)
				{
					int w = mp[0];
					a0 += ip[0] * w;
					a1 += ip[1] * w;
					a2 += ip[2] * w;
					a3 += ip[3] * w;

					w = mp[1];
					a0 += ip[4] * w;
					a1 += ip[5] * w;
					a2 += ip[6] * w;
					a3 += ip[7] * w;

					w = mp[2];
					a0 += ip[8] * w;
					a1 += ip[9] * w;
					a2 += ip[10] * w;
					a3 += ip[11] * w;

					w = mp[3];
					a0 += ip[12] * w;
					a1 += ip[13] * w;
					a2 += ip[14] * w;
					a3 += ip[15] * w;

					ip += 4 * Channels;
					mp += 4;
				}

				ipe += 4 * Channels;
				while (ip < ipe)
				{
					int w = mp[0];
					a0 += ip[0] * w;
					a1 += ip[1] * w;
					a2 += ip[2] * w;
					a3 += ip[3] * w;

					ip += Channels;
					mp++;
				}

				tp[0] = UnFix15(a0);
				tp[1] = UnFix15(a1);
				tp[2] = UnFix15(a2);
				tp[3] = UnFix15(a3);
				tp += tstride;
			}
		}

		unsafe void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			ushort* op = (ushort*)ostart;
			int xc = ox + ow, tstride = smapy * Channels;

			while (ox < xc)
			{
				int a0 = 0, a1 = 0, a2 = 0, a3 = 0;

				int* tp = (int*)tstart + ox * tstride;
				int* tpe = tp + tstride - 2 * Channels;
				int* mp = (int*)pmapy;

				while (tp <= tpe)
				{
					int w = mp[0];
					a0 += tp[0] * w;
					a1 += tp[1] * w;
					a2 += tp[2] * w;
					a3 += tp[3] * w;

					w = mp[1];
					a0 += tp[4] * w;
					a1 += tp[5] * w;
					a2 += tp[6] * w;
					a3 += tp[7] * w;

					tp += 2 * Channels;
					mp += 2;
				}

				tpe += 2 * Channels;
				while (tp < tpe)
				{
					int w = mp[0];
					a0 += tp[0] * w;
					a1 += tp[1] * w;
					a2 += tp[2] * w;
					a3 += tp[3] * w;

					tp += Channels;
					mp++;
				}

				op[0] = UnFixToUQ15(a0);
				op[1] = UnFixToUQ15(a1);
				op[2] = UnFixToUQ15(a2);
				op[3] = UnFixToUQ15(a3);
				op += Channels;
				ox++;
			}
		}

		unsafe void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			fixed (byte* gtstart = &LookupTables.SrgbGammaUQ15[0])
			fixed (ushort* igtstart = &LookupTables.SrgbInverseGammaUQ15[0])
			{
				int iamt = Fix15(amt * 0.01);
				int threshold = thresh;

				byte* gt = gtstart;
				ushort* ip = (ushort*)cstart + ox * Channels, yp = (ushort*)ystart + ox, bp = (ushort*)bstart, op = (ushort*)ostart, igt = igtstart;

				int xc = ox + ow;
				for (int x = ox; x < xc; x++, ip += Channels, op += Channels)
				{
					int dif = *yp++ - *bp++;

					ushort c0 = ip[0], c1 = ip[1], c2 = ip[2], c3 = ip[3];
					if (threshold == 0 || Math.Abs(dif) > threshold)
					{
						c0 = gt[(uint)ClampToUQ15One((uint)c0)];
						c1 = gt[(uint)ClampToUQ15One((uint)c1)];
						c2 = gt[(uint)ClampToUQ15One((uint)c2)];

						dif = UnFix15(dif * iamt);
						op[0] = igt[(uint)ClampToByte(c0 + dif)];
						op[1] = igt[(uint)ClampToByte(c1 + dif)];
						op[2] = igt[(uint)ClampToByte(c2 + dif)];
						op[3] = c3;
					}
					else
					{
						op[0] = c0;
						op[1] = c1;
						op[2] = c2;
						op[3] = c3;
					}
				}
			}
		}
	}

	internal sealed class ConvolverBgrByte : IConvolver
	{
		private const int Channels = 3;

		public static ConvolverBgrByte Instance = new ConvolverBgrByte();

		private ConvolverBgrByte() { }

		int IConvolver.Channels => Channels;
		int IConvolver.MapChannels => 1;

		unsafe void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			int* tp = (int*)tstart, tpe = (int*)(tstart + cb);
			int* pmapx = (int*)mapxstart;
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int a0 = 0, a1 = 0, a2 = 0;

				int ix = *pmapx++;
				byte* ip = istart + ix * Channels;
				byte* ipe = ip + smapx * Channels - 5 * Channels;
				int* mp = pmapx;
				pmapx += smapx;

				while (ip <= ipe)
				{
					int w = mp[0];
					a0 += ip[0] * w;
					a1 += ip[1] * w;
					a2 += ip[2] * w;

					w = mp[1];
					a0 += ip[3] * w;
					a1 += ip[4] * w;
					a2 += ip[5] * w;

					w = mp[2];
					a0 += ip[6] * w;
					a1 += ip[7] * w;
					a2 += ip[8] * w;

					w = mp[3];
					a0 += ip[9] * w;
					a1 += ip[10] * w;
					a2 += ip[11] * w;

					w = mp[4];
					a0 += ip[12] * w;
					a1 += ip[13] * w;
					a2 += ip[14] * w;

					ip += 5 * Channels;
					mp += 5;
				}

				ipe += 5 * Channels;
				while (ip < ipe)
				{
					int w = mp[0];
					a0 += ip[0] * w;
					a1 += ip[1] * w;
					a2 += ip[2] * w;

					ip += Channels;
					mp++;
				}

				tp[0] = UnFix8(a0);
				tp[1] = UnFix8(a1);
				tp[2] = UnFix8(a2);
				tp += tstride;
			}
		}

		unsafe void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			byte* op = ostart;
			int xc = ox + ow, tstride = smapy * Channels;

			while (ox < xc)
			{
				int a0 = 0, a1 = 0, a2 = 0;

				int* tp = (int*)tstart + ox * tstride;
				int* tpe = tp + tstride - 2 * Channels;
				int* mp = (int*)pmapy;

				while (tp <= tpe)
				{
					int w = mp[0];
					a0 += tp[0] * w;
					a1 += tp[1] * w;
					a2 += tp[2] * w;

					w = mp[1];
					a0 += tp[3] * w;
					a1 += tp[4] * w;
					a2 += tp[5] * w;

					tp += 2 * Channels;
					mp += 2;
				}

				tpe += 2 * Channels;
				while (tp < tpe)
				{
					int w = mp[0];
					a0 += tp[0] * w;
					a1 += tp[1] * w;
					a2 += tp[2] * w;

					tp += Channels;
					mp++;
				}

				op[0] = UnFix22ToByte(a0);
				op[1] = UnFix22ToByte(a1);
				op[2] = UnFix22ToByte(a2);
				op += Channels;
				ox++;
			}
		}

		unsafe void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			int iamt = Fix15(amt * 0.01);
			int threshold = thresh;

			byte* ip = cstart + ox * Channels, yp = ystart + ox, bp = bstart, op = ostart;

			int xc = ox + ow;
			for (int x = ox; x < xc; x++, ip += Channels, op += Channels)
			{
				int dif = *yp++ - *bp++;

				byte c0 = ip[0], c1 = ip[1], c2 = ip[2];
				if (threshold == 0 || Math.Abs(dif) > threshold)
				{
					dif = UnFix15(dif * iamt);
					op[0] = ClampToByte(c0 + dif);
					op[1] = ClampToByte(c1 + dif);
					op[2] = ClampToByte(c2 + dif);
				}
				else
				{
					op[0] = c0;
					op[1] = c1;
					op[2] = c2;
				}
			}
		}
	}

	internal sealed class ConvolverBgrUQ15 : IConvolver
	{
		private const int Channels = 3;

		public static ConvolverBgrUQ15 Instance = new ConvolverBgrUQ15();

		private ConvolverBgrUQ15() { }

		int IConvolver.Channels => Channels;
		int IConvolver.MapChannels => 1;

		unsafe void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			int* tp = (int*)tstart, tpe = (int*)(tstart + cb);
			int* pmapx = (int*)mapxstart;
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int a0 = 0, a1 = 0, a2 = 0;

				int ix = *pmapx++;
				ushort* ip = (ushort*)istart + ix * Channels;
				ushort* ipe = ip + smapx * Channels - 5 * Channels;
				int* mp = pmapx;
				pmapx += smapx;

				while (ip <= ipe)
				{
					int w = mp[0];
					a0 += ip[0] * w;
					a1 += ip[1] * w;
					a2 += ip[2] * w;

					w = mp[1];
					a0 += ip[3] * w;
					a1 += ip[4] * w;
					a2 += ip[5] * w;

					w = mp[2];
					a0 += ip[6] * w;
					a1 += ip[7] * w;
					a2 += ip[8] * w;

					w = mp[3];
					a0 += ip[9] * w;
					a1 += ip[10] * w;
					a2 += ip[11] * w;

					w = mp[4];
					a0 += ip[12] * w;
					a1 += ip[13] * w;
					a2 += ip[14] * w;

					ip += 5 * Channels;
					mp += 5;
				}

				ipe += 5 * Channels;
				while (ip < ipe)
				{
					int w = mp[0];
					a0 += ip[0] * w;
					a1 += ip[1] * w;
					a2 += ip[2] * w;

					ip += Channels;
					mp++;
				}

				tp[0] = UnFix15(a0);
				tp[1] = UnFix15(a1);
				tp[2] = UnFix15(a2);
				tp += tstride;
			}
		}

		unsafe void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			ushort* op = (ushort*)ostart;
			int xc = ox + ow, tstride = smapy * Channels;

			while (ox < xc)
			{
				int a0 = 0, a1 = 0, a2 = 0;

				int* tp = (int*)tstart + ox * tstride;
				int* tpe = tp + tstride - 2 * Channels;
				int* mp = (int*)pmapy;

				while (tp <= tpe)
				{
					int w = mp[0];
					a0 += tp[0] * w;
					a1 += tp[1] * w;
					a2 += tp[2] * w;

					w = mp[1];
					a0 += tp[3] * w;
					a1 += tp[4] * w;
					a2 += tp[5] * w;

					tp += 2 * Channels;
					mp += 2;
				}

				tpe += 2 * Channels;
				while (tp < tpe)
				{
					int w = mp[0];
					a0 += tp[0] * w;
					a1 += tp[1] * w;
					a2 += tp[2] * w;

					tp += Channels;
					mp++;
				}

				op[0] = UnFixToUQ15(a0);
				op[1] = UnFixToUQ15(a1);
				op[2] = UnFixToUQ15(a2);
				op += Channels;
				ox++;
			}
		}

		unsafe void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			fixed (byte* gtstart = &LookupTables.SrgbGammaUQ15[0])
			fixed (ushort* igtstart = &LookupTables.SrgbInverseGammaUQ15[0])
			{
				int iamt = Fix15(amt * 0.01);
				int threshold = thresh;

				byte* gt = gtstart;
				ushort* ip = (ushort*)cstart + ox * Channels, yp = (ushort*)ystart + ox, bp = (ushort*)bstart, op = (ushort*)ostart, igt = igtstart;

				int xc = ox + ow;
				for (int x = ox; x < xc; x++, ip += Channels, op += Channels)
				{
					int dif = *yp++ - *bp++;

					ushort c0 = ip[0], c1 = ip[1], c2 = ip[2];
					if (threshold == 0 || Math.Abs(dif) > threshold)
					{
						c0 = gt[(uint)ClampToUQ15One((uint)c0)];
						c1 = gt[(uint)ClampToUQ15One((uint)c1)];
						c2 = gt[(uint)ClampToUQ15One((uint)c2)];

						dif = UnFix15(dif * iamt);
						op[0] = igt[(uint)ClampToByte(c0 + dif)];
						op[1] = igt[(uint)ClampToByte(c1 + dif)];
						op[2] = igt[(uint)ClampToByte(c2 + dif)];
					}
					else
					{
						op[0] = c0;
						op[1] = c1;
						op[2] = c2;
					}
				}
			}
		}
	}

	internal sealed class Convolver1ChanByte : IConvolver
	{
		private const int Channels = 1;

		public static Convolver1ChanByte Instance = new Convolver1ChanByte();

		private Convolver1ChanByte() { }

		int IConvolver.Channels => Channels;
		int IConvolver.MapChannels => 1;

		unsafe void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			int* tp = (int*)tstart, tpe = (int*)(tstart + cb);
			int* pmapx = (int*)mapxstart;
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int a0 = 0;

				int ix = *pmapx++;
				byte* ip = istart + ix * Channels;
				byte* ipe = ip + smapx * Channels - 8 * Channels;
				int* mp = pmapx;
				pmapx += smapx;

				while (ip <= ipe)
				{
					a0 += ip[0] * mp[0];
					a0 += ip[1] * mp[1];
					a0 += ip[2] * mp[2];
					a0 += ip[3] * mp[3];
					a0 += ip[4] * mp[4];
					a0 += ip[5] * mp[5];
					a0 += ip[6] * mp[6];
					a0 += ip[7] * mp[7];
					ip += 8 * Channels;
					mp += 8;
				}

				ipe += 8 * Channels;
				while (ip < ipe)
				{
					a0 += ip[0] * mp[0];

					ip += Channels;
					mp++;
				}

				tp[0] = UnFix8(a0);
				tp += tstride;
			}
		}

		unsafe void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			byte* op = ostart;
			int xc = ox + ow, tstride = smapy * Channels;

			while (ox < xc)
			{
				int a0 = 0;

				int* tp = (int*)tstart + ox * tstride;
				int* tpe = tp + tstride - 4 * Channels;
				int* mp = (int*)pmapy;

				while (tp <= tpe)
				{
					a0 += tp[0] * mp[0];
					a0 += tp[1] * mp[1];
					a0 += tp[2] * mp[2];
					a0 += tp[3] * mp[3];
					tp += 4 * Channels;
					mp += 4;
				}

				tpe += 4 * Channels;
				while (tp < tpe)
				{
					a0 += tp[0] * mp[0];

					tp += Channels;
					mp++;
				}

				op[0] = UnFix22ToByte(a0);
				op += Channels;
				ox++;
			}
		}

		unsafe void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			int iamt = Fix15(amt * 0.01);
			int threshold = thresh;

			byte* ip = cstart + ox * Channels, yp = ystart + ox, bp = bstart, op = ostart;

			int xc = ox + ow;
			for (int x = ox; x < xc; x++, ip += Channels, op += Channels)
			{
				int dif = *yp++ - *bp++;

				byte c0 = ip[0];
				if (threshold == 0 || Math.Abs(dif) > threshold)
				{
					dif = UnFix15(dif * iamt);
					op[0] = ClampToByte(c0 + dif);
				}
				else
				{
					op[0] = c0;
				}
			}
		}
	}

	internal sealed class Convolver1ChanUQ15 : IConvolver
	{
		private const int Channels = 1;

		public static Convolver1ChanUQ15 Instance = new Convolver1ChanUQ15();

		private Convolver1ChanUQ15() { }

		int IConvolver.Channels => Channels;
		int IConvolver.MapChannels => 1;

		unsafe void IConvolver.ConvolveSourceLine(byte* istart, byte* tstart, int cb, byte* mapxstart, int smapx, int smapy)
		{
			int* tp = (int*)tstart, tpe = (int*)(tstart + cb);
			int* pmapx = (int*)mapxstart;
			int tstride = smapy * Channels;

			while (tp < tpe)
			{
				int a0 = 0;

				int ix = *pmapx++;
				ushort* ip = (ushort*)istart + ix * Channels;
				ushort* ipe = ip + smapx * Channels - 8 * Channels;
				int* mp = pmapx;
				pmapx += smapx;

				while (ip <= ipe)
				{
					a0 += ip[0] * mp[0];
					a0 += ip[1] * mp[1];
					a0 += ip[2] * mp[2];
					a0 += ip[3] * mp[3];
					a0 += ip[4] * mp[4];
					a0 += ip[5] * mp[5];
					a0 += ip[6] * mp[6];
					a0 += ip[7] * mp[7];
					ip += 8 * Channels;
					mp += 8;
				}

				ipe += 8 * Channels;
				while (ip < ipe)
				{
					a0 += ip[0] * mp[0];

					ip += Channels;
					mp++;
				}

				tp[0] = UnFix15(a0);
				tp += tstride;
			}
		}

		unsafe void IConvolver.WriteDestLine(byte* tstart, byte* ostart, int ox, int ow, byte* pmapy, int smapy)
		{
			ushort* op = (ushort*)ostart;
			int xc = ox + ow, tstride = smapy * Channels;

			while (ox < xc)
			{
				int a0 = 0;

				int* tp = (int*)tstart + ox * tstride;
				int* tpe = tp + tstride - 4 * Channels;
				int* mp = (int*)pmapy;

				while (tp <= tpe)
				{
					a0 += tp[0] * mp[0];
					a0 += tp[1] * mp[1];
					a0 += tp[2] * mp[2];
					a0 += tp[3] * mp[3];
					tp += 4 * Channels;
					mp += 4;
				}

				tpe += 4 * Channels;
				while (tp < tpe)
				{
					a0 += tp[0] * mp[0];

					tp += Channels;
					mp++;
				}

				op[0] = UnFixToUQ15(a0);
				op += Channels;
				ox++;
			}
		}

		unsafe void IConvolver.SharpenLine(byte* cstart, byte* ystart, byte* bstart, byte* ostart, int ox, int ow, int amt, int thresh, bool gamma)
		{
			fixed (byte* gtstart = &LookupTables.SrgbGammaUQ15[0])
			fixed (ushort* igtstart = &LookupTables.SrgbInverseGammaUQ15[0])
			{
				int iamt = Fix15(amt * 0.01);
				int threshold = thresh;

				byte* gt = gtstart;
				ushort* ip = (ushort*)cstart + ox * Channels, yp = (ushort*)ystart + ox, bp = (ushort*)bstart, op = (ushort*)ostart, igt = igtstart;

				int xc = ox + ow;
				for (int x = ox; x < xc; x++, ip += Channels, op += Channels)
				{
					int dif = *yp++ - *bp++;

					ushort c0 = ip[0];
					if (threshold == 0 || Math.Abs(dif) > threshold)
					{
						c0 = gt[(uint)ClampToUQ15One((uint)c0)];

						dif = UnFix15(dif * iamt);
						op[0] = igt[(uint)ClampToByte(c0 + dif)];
					}
					else
					{
						op[0] = c0;
					}
				}
			}
		}
	}
}
